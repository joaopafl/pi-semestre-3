@model Pi_Odonto.Models.SolicitacaoVoluntario

@{
    ViewData["Title"] = "Detalhes da Solicitação";
}

<style>
    .detalhes-container {
        max-width: 900px;
        margin: 30px auto;
        padding: 20px;
    }

    .card-detalhes {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .card-header-detalhes {
        background: linear-gradient(135deg, #2c5282, #4a90e2);
        color: white;
        padding: 30px;
        text-align: center;
    }

    .badge-status-grande {
        display: inline-block;
        padding: 10px 20px;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: bold;
        margin-top: 10px;
    }

    .badge-pendente {
        background: #fef3c7;
        color: #92400e;
    }

    .badge-aprovado {
        background: #d1fae5;
        color: #065f46;
    }

    .badge-rejeitado {
        background: #fee2e2;
        color: #991b1b;
    }

    .card-body-detalhes {
        padding: 40px;
    }

    .info-section {
        margin-bottom: 30px;
    }

    .section-title {
        color: #2c5282;
        font-size: 1.3rem;
        font-weight: bold;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e2e8f0;
    }

    .info-row {
        display: flex;
        margin-bottom: 15px;
        padding: 10px;
        background: #f7fafc;
        border-radius: 8px;
    }

    .info-label {
        font-weight: bold;
        color: #2c5282;
        min-width: 150px;
    }

    .info-value {
        color: #4a5568;
        flex: 1;
    }

    .mensagem-box {
        background: #f7fafc;
        border-left: 4px solid #4a90e2;
        padding: 20px;
        border-radius: 8px;
        margin-top: 15px;
    }

    .observacao-admin-box {
        background: #fef3c7;
        border-left: 4px solid #f59e0b;
        padding: 20px;
        border-radius: 8px;
        margin-top: 15px;
    }

    .acoes-container {
        display: flex;
        gap: 10px;
        justify-content: center;
        padding: 30px;
        background: #f7fafc;
        border-top: 2px solid #e2e8f0;
    }

    .btn-acao-grande {
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: bold;
        font-size: 1rem;
        border: none;
        cursor: pointer;
        transition: all 0.3s;
    }

        .btn-acao-grande:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

    .nova-badge {
        background: #f59e0b;
        color: white;
        padding: 5px 15px;
        border-radius: 20px;
        font-size: 0.8rem;
        margin-left: 10px;
    }
</style>

<div class="detalhes-container">
    <div class="card-detalhes">
        <!-- Header -->
        <div class="card-header-detalhes">
            <h2 class="mb-0">
                <i class="fas fa-user-md"></i> Solicitação de Voluntário
            </h2>
            @if (!Model.Visualizado)
            {
                <span class="nova-badge">NOVA</span>
            }
            <div class="badge-status-grande badge-@Model.Status.ToLower()">
                @Model.Status.ToUpper()
            </div>
        </div>

        <!-- Body -->
        <div class="card-body-detalhes">

            <!-- Dados Pessoais -->
            <div class="info-section">
                <div class="section-title">
                    <i class="fas fa-user"></i> Dados Pessoais
                </div>
                <div class="info-row">
                    <span class="info-label">Nome Completo:</span>
                    <span class="info-value">@Model.Nome</span>
                </div>
                <div class="info-row">
                    <span class="info-label">CPF:</span>
                    <span class="info-value">@Model.Cpf</span>
                </div>
                <div class="info-row">
                    <span class="info-label">CRO:</span>
                    <span class="info-value">@Model.Cro</span>
                </div>
                @if (!string.IsNullOrEmpty(Model.Endereco))
                {
                    <div class="info-row">
                        <span class="info-label">Endereço:</span>
                        <span class="info-value">@Model.Endereco</span>
                    </div>
                }
            </div>

            <!-- Contato -->
            <div class="info-section">
                <div class="section-title">
                    <i class="fas fa-phone"></i> Informações de Contato
                </div>
                <div class="info-row">
                    <span class="info-label">Email:</span>
                    <span class="info-value">
                        <a href="mailto:@Model.Email">@Model.Email</a>
                    </span>
                </div>
                <div class="info-row">
                    <span class="info-label">Telefone:</span>
                    <span class="info-value">
                        <a href="tel:@Model.Telefone">@Model.Telefone</a>
                    </span>
                </div>
            </div>

            <!-- Mensagem -->
            <div class="info-section">
                <div class="section-title">
                    <i class="fas fa-comment"></i> Mensagem / Motivação
                </div>
                <div class="mensagem-box">
                    @Model.Mensagem
                </div>
            </div>

            <!-- Datas -->
            <div class="info-section">
                <div class="section-title">
                    <i class="fas fa-calendar"></i> Informações da Solicitação
                </div>
                <div class="info-row">
                    <span class="info-label">Data da Solicitação:</span>
                    <span class="info-value">@Model.DataSolicitacao.ToString("dd/MM/yyyy HH:mm")</span>
                </div>
                @if (Model.DataResposta.HasValue)
                {
                    <div class="info-row">
                        <span class="info-label">Data da Resposta:</span>
                        <span class="info-value">@Model.DataResposta.Value.ToString("dd/MM/yyyy HH:mm")</span>
                    </div>
                }
                <div class="info-row">
                    <span class="info-label">Visualizado:</span>
                    <span class="info-value">@(Model.Visualizado ? "Sim" : "Não")</span>
                </div>
            </div>

            <!-- Observação do Admin -->
            @if (!string.IsNullOrEmpty(Model.ObservacaoAdmin))
            {
                <div class="info-section">
                    <div class="section-title">
                        <i class="fas fa-clipboard"></i> Observação do Administrador
                    </div>
                    <div class="observacao-admin-box">
                        @Model.ObservacaoAdmin
                    </div>
                </div>
            }
        </div>

        <!-- Ações -->
        <div class="acoes-container">
            <a href="/Admin/Solicitacoes" class="btn-acao-grande btn-secondary">
                <i class="fas fa-arrow-left"></i> Voltar
            </a>

            @if (Model.Status == "Pendente")
            {
                <button type="button" class="btn-acao-grande btn-success"
                        onclick="abrirModalAprovar(@Model.Id, '@Model.Nome')">
                    <i class="fas fa-check"></i> Aprovar
                </button>
                <button type="button" class="btn-acao-grande btn-warning"
                        onclick="abrirModalRejeitar(@Model.Id, '@Model.Nome')">
                    <i class="fas fa-times"></i> Rejeitar
                </button>
            }

            <form asp-action="ExcluirSolicitacao" method="post" style="display: inline;"
                  onsubmit="return confirm('Tem certeza que deseja excluir esta solicitação?')">
                <input type="hidden" name="id" value="@Model.Id" />
                @Html.AntiForgeryToken()
                <button type="submit" class="btn-acao-grande btn-danger">
                    <i class="fas fa-trash"></i> Excluir
                </button>
            </form>
        </div>
    </div>
</div>

<!-- Modais (mesmos da view Solicitacoes.cshtml) -->
<div class="modal fade" id="modalAprovar" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-check-circle"></i> Aprovar Solicitação
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Deseja aprovar a solicitação de <strong id="nomeAprovar"></strong>?</p>
                <div class="form-group">
                    <label>Observação (opcional):</label>
                    <textarea id="observacaoAprovar" class="form-control" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-success" onclick="confirmarAprovacao()">
                    <i class="fas fa-check"></i> Aprovar
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalRejeitar" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title">
                    <i class="fas fa-times-circle"></i> Rejeitar Solicitação
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Deseja rejeitar a solicitação de <strong id="nomeRejeitar"></strong>?</p>
                <div class="form-group">
                    <label>Motivo da rejeição (opcional):</label>
                    <textarea id="observacaoRejeitar" class="form-control" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" onclick="confirmarRejeicao()">
                    <i class="fas fa-times"></i> Rejeitar
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let solicitacaoIdAtual = @Model.Id;

        function abrirModalAprovar(id, nome) {
            solicitacaoIdAtual = id;
            document.getElementById('nomeAprovar').textContent = nome;
            document.getElementById('observacaoAprovar').value = '';
            new bootstrap.Modal(document.getElementById('modalAprovar')).show();
        }

        function abrirModalRejeitar(id, nome) {
            solicitacaoIdAtual = id;
            document.getElementById('nomeRejeitar').textContent = nome;
            document.getElementById('observacaoRejeitar').value = '';
            new bootstrap.Modal(document.getElementById('modalRejeitar')).show();
        }

        async function confirmarAprovacao() {
            const observacao = document.getElementById('observacaoAprovar').value;

            try {
                const response = await fetch(`/Admin/AprovarSolicitacao/${solicitacaoIdAtual}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `observacao=${encodeURIComponent(observacao)}&__RequestVerificationToken=${document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''}`
                });

                const data = await response.json();

                if (data.success) {
                    alert(data.message);
                    location.href = '/Admin/Solicitacoes';
                } else {
                    alert('Erro: ' + data.message);
                }
            } catch (error) {
                alert('Erro ao aprovar solicitação.');
                console.error(error);
            }
        }

        async function confirmarRejeicao() {
            const observacao = document.getElementById('observacaoRejeitar').value;

            try {
                const response = await fetch(`/Admin/RejeitarSolicitacao/${solicitacaoIdAtual}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `observacao=${encodeURIComponent(observacao)}&__RequestVerificationToken=${document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''}`
                });

                const data = await response.json();

                if (data.success) {
                    alert(data.message);
                    location.href = '/Admin/Solicitacoes';
                } else {
                    alert('Erro: ' + data.message);
                }
            } catch (error) {
                alert('Erro ao rejeitar solicitação.');
                console.error(error);
            }
        }
    </script>
}